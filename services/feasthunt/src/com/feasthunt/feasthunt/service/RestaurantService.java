/*Copyright (c) 2015-2016 wavemaker.com. All Rights Reserved.

This software is the confidential and proprietary information of wavemaker.com. You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.feasthunt.feasthunt.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.feasthunt.feasthunt.*;

/**
 * Service object for domain model class Restaurant.
 * @see com.feasthunt.feasthunt.Restaurant
 */

public interface RestaurantService {
   /**
	 * Creates a new restaurant.
	 * 
	 * @param created
	 *            The information of the created restaurant.
	 * @return The created restaurant.
	 */
	public Restaurant create(Restaurant created);

	/**
	 * Deletes a restaurant.
	 * 
	 * @param restaurantId
	 *            The id of the deleted restaurant.
	 * @return The deleted restaurant.
	 * @throws EntityNotFoundException
	 *             if no restaurant is found with the given id.
	 */
	public Restaurant delete(Integer restaurantId) throws EntityNotFoundException;

	/**
	 * Finds all restaurants.
	 * 
	 * @return A list of restaurants.
	 */
	public Page<Restaurant> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Restaurant> findAll(Pageable pageable);
	
	/**
	 * Finds restaurant by id.
	 * 
	 * @param id
	 *            The id of the wanted restaurant.
	 * @return The found restaurant. If no restaurant is found, this method returns
	 *         null.
	 */
	public Restaurant findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a restaurant.
	 * 
	 * @param updated
	 *            The information of the updated restaurant.
	 * @return The updated restaurant.
	 * @throws EntityNotFoundException
	 *             if no restaurant is found with given id.
	 */
	public Restaurant update(Restaurant updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the restaurants in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the restaurant.
	 */

	public long countAll();


    public Page<Restaurant> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

