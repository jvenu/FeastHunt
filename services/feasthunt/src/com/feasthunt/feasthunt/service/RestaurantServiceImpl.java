/*Copyright (c) 2015-2016 wavemaker.com. All Rights Reserved.

This software is the confidential and proprietary information of wavemaker.com. You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.feasthunt.feasthunt.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.feasthunt.feasthunt.*;


/**
 * ServiceImpl object for domain model class Restaurant.
 * @see com.feasthunt.feasthunt.Restaurant
 */
@Service("feasthunt.RestaurantService")
public class RestaurantServiceImpl implements RestaurantService {


    private static final Logger LOGGER = LoggerFactory.getLogger(RestaurantServiceImpl.class);

    @Autowired
    @Qualifier("feasthunt.RestaurantDao")
    private WMGenericDao<Restaurant, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Restaurant, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "feasthuntTransactionManager")
     public Page<Restaurant> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "feasthuntTransactionManager")
    @Override
    public Restaurant create(Restaurant restaurant) {
        LOGGER.debug("Creating a new restaurant with information: {}" , restaurant);
        return this.wmGenericDao.create(restaurant);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "feasthuntTransactionManager")
    @Override
    public Restaurant delete(Integer restaurantId) throws EntityNotFoundException {
        LOGGER.debug("Deleting restaurant with id: {}" , restaurantId);
        Restaurant deleted = this.wmGenericDao.findById(restaurantId);
        if (deleted == null) {
            LOGGER.debug("No restaurant found with id: {}" , restaurantId);
            throw new EntityNotFoundException(String.valueOf(restaurantId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "feasthuntTransactionManager")
    @Override
    public Page<Restaurant> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all restaurants");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "feasthuntTransactionManager")
    @Override
    public Page<Restaurant> findAll(Pageable pageable) {
        LOGGER.debug("Finding all restaurants");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "feasthuntTransactionManager")
    @Override
    public Restaurant findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding restaurant by id: {}" , id);
        Restaurant restaurant=this.wmGenericDao.findById(id);
        if(restaurant==null){
            LOGGER.debug("No restaurant found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return restaurant;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "feasthuntTransactionManager")
    @Override
    public Restaurant update(Restaurant updated) throws EntityNotFoundException {
        LOGGER.debug("Updating restaurant with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "feasthuntTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


